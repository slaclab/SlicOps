import {
    AfterViewInit,
    ChangeDetectorRef,
    Component,
    ElementRef,
    HostListener,
    Input,
    OnChanges,
    OnDestroy,
    ViewChild,
} from '@angular/core';
import { Subject, debounceTime } from 'rxjs';
import * as d3 from 'd3';

class SVG {

    static clipPathId(width: number, height: number): string {
        return `sr-clippath-${width}-${height}`;
    }

    static clipPathURL(width: number, height: number): string {
        return `url(#${SVG.clipPathId(width, height)})`;
    }

    static eventCenter(event: any, target: any) : number[] {
        const p = d3.pointers(event, target);
        return [d3.mean(p, d => d[0]), d3.mean(p, d => d[1])] as number[];
    }

    static translate(x: number, y: number): string {
        return `translate(${x}, ${y})`;
    }
}


@Component({
    selector: 'app-heatmap-with-lineouts',
    template: `
<h2 style="text-align: center">OTRS:LI21:291</h2>
<figure #figure>
  <div [ngStyle]="{
    position: 'absolute',
    'marginTop.px': margin.top,
    'marginLeft.px': margin.left,
    zIndex: -1,
  }">
    <canvas></canvas>
  </div>
  <div style="position: absolute; height: 0px">
    <div [ngStyle]="{
      transform: 'rotate(270deg)',
      position: 'relative',
      'left.px': margin.left + canvasWidth + lineoutSize + margin.right - canvasHeight / 2 - 14,
      'top.px': canvasHeight / 2 + margin.top - 10,
      'width.px': canvasHeight,
    }">
      <div class="sr-y-axis-label text-center">{{ yLabel }}</div>
    </div>
  </div>
  <svg
    [attr.width]="margin.left + canvasWidth + lineoutSize + margin.right"
    [attr.height]="margin.top + canvasHeight + lineoutSize + margin.bottom"
  >
    <g [attr.transform]="SVG.translate(margin.left, margin.top)">
      <g class="sr-overlay"></g>
      <g class="sr-y-overlay" [attr.transform]="SVG.translate(canvasWidth + pad, 0)">
        <defs>
          <clipPath [attr.id]="SVG.clipPathId(lineoutSize, canvasHeight)">
            <rect [attr.width]="lineoutSize" [attr.height]="canvasHeight"></rect>
          </clipPath>
        </defs>
        <g [attr.clip-path]="SVG.clipPathURL(lineoutSize, canvasHeight)">
          <path></path>
        </g>
      </g>
      <g [attr.transform]="SVG.translate(0, canvasHeight + pad)" class="sr-x-overlay">
        <defs>
          <clipPath [attr.id]="SVG.clipPathId(canvasWidth, lineoutSize)">
            <rect [attr.width]="canvasWidth" [attr.height]="lineoutSize"></rect>
          </clipPath>
        </defs>
        <g [attr.clip-path]="SVG.clipPathURL(canvasWidth, lineoutSize)">
          <path></path>
        </g>
      </g>
      <g class="sr-x-axis" [attr.transform]="SVG.translate(0, canvasHeight + lineoutSize)"></g>
      <g class="sr-x-axis-grid" [attr.transform]="SVG.translate(0, canvasHeight + lineoutSize)"></g>
      <g [attr.transform]="SVG.translate(canvasWidth + lineoutSize, 0)">
        <g class="sr-y-axis"></g>
        <g class="sr-y-axis-grid"></g>
      </g>
      <g [attr.transform]="SVG.translate(canvasWidth + pad, canvasHeight )">
        <g class="sr-yx-axis"></g>
      </g>
      <g [attr.transform]="SVG.translate(0, canvasHeight + pad)">
        <g class="sr-xy-axis"></g>
      </g>

      <rect class="sr-mouse-rect-xy sr-mouse-zoom" [attr.width]="canvasWidth"
        [attr.height]="canvasHeight"></rect>
      <rect class="sr-mouse-rect-y sr-mouse-zoom" [attr.x]="canvasWidth" [attr.width]="lineoutSize"
        [attr.height]="canvasHeight"></rect>
      <rect class="sr-mouse-rect-x sr-mouse-zoom" [attr.y]="canvasHeight"
        [attr.width]="canvasWidth" [attr.height]="lineoutSize"></rect>

    </g>
  </svg>
  <div class="sr-x-axis-label text-center" [ngStyle]="{
    'width.px': canvasWidth,
    'marginLeft.px': margin.left
  }">{{ xLabel }}</div>
</figure>
    `,
    styles: [
        `
.sr-x-overlay path, .sr-y-overlay path {
    fill: none;
    stroke: steelblue;
    stroke-width: 2;
}
        `,
    ],
})
export class HeatmapWithLineoutsComponent {
    @ViewChild('figure') el!:ElementRef;

    //TODO: input should be a structure
    //  rows
    //  xLabel
    //  yLabel
    //  xDomain
    //  yDomain
    //  colormap

    @Input() data: number[][] = [];
    SVG = SVG;
    xScale = d3.scaleLinear();
    xZoomScale = this.xScale;
    xyScale = d3.scaleLinear();
    yScale = d3.scaleLinear();
    //yZoomScale = this.yScale;
    yxScale = d3.scaleLinear();
    //colorScale = d3.scaleSequential(d3.interpolateViridis);
    colorScale = d3.scaleSequential(d3.interpolateInferno);
    xLabel = "x [mm]";
    yLabel = "y [mm]";
    canvas: any;
    ctx: any;
    cacheCanvas: any;
    imageData: any;
    zoomX = d3.zoom();
    zoomY = d3.zoom();
    zoom = d3.zoom();
    z = d3.zoomIdentity;

    margin = {
        left: 65,
        right: 65,
        top: 10,
        bottom: 30,
    };
    pad = 12;
    canvasWidth = 1;
    canvasHeight = 1;
    lineoutSize = 0;

    resize = new Subject<void>;

    constructor(private cdRef: ChangeDetectorRef) {
    }

    select(selector?: string) : any {
        const s = d3.select(this.el.nativeElement);
        return selector ? s.select(selector) : s;
    }

    domain(axisIndex: number) : number[] {
        //TODO(pjm): from input
        if (axisIndex === 0) {
            return [-4, 4];
        }
        return [0, 4];
    }

    handleZoom(e: any) {
        const t = e.transform;
        const k = t.k / this.z.k;
        const point = SVG.eventCenter(event, this.select('svg').node());
        console.log('point:', point);
        let target = '';

        if (point[0] > this.margin.left
            && point[0] < (this.margin.left + this.canvasWidth)) {
            if (point[1] > this.margin.top
                && point[1] < (this.margin.top + this.canvasHeight)) {
                target = 'canvas';
            }
            else if (point[1] > (this.margin.top + this.canvasHeight)
                     && point[1] < (this.margin.top + this.canvasHeight + this.lineoutSize)) {
                target = 'xlineout';
            }
        }
        else if (point[0] > (this.margin.left + this.canvasWidth)
                 && point[0] < (this.margin.left + this.canvasWidth + this.lineoutSize)) {
            if (point[1] > this.margin.top
                && point[1] < (this.margin.top + this.canvasHeight)) {
                target = 'ylineout';
            }
        }
        if (target) {
            console.log('target:', target);
            if (target === 'canvas' || target === 'xlineout') {
                console.log('zoom/pan x');

                this.xZoomScale = t.rescaleX(this.xScale).interpolate(d3.interpolateRound);
            }
            this.refresh();
        }
        
        this.z = t;
    }

    /*
    handleZoomX(e: any) {
        const t = e.transform;
        if (t.k < 1) {
            t.k = 1;
        }
        if (t.x > 0) {
            t.x = 0;
        }
        else if (t.x < 0) {
            //TODO(pjm): this has a bug if the body scrollbar is present,
            // you can't pan all the way to the right
            const r = this.xZoomScale.range()[1];
            console.log('r:', r);
            if (t.k * r - r + t.x < 0) {
                t.x = -(t.k * r - r);
            }
        }
        this.xZoomScale = t.rescaleX(this.xScale).interpolate(d3.interpolateRound);
    }

    handleZoom(e: any) {
        const t = e.transform;
        //this.handleZoomX(e);
        //this.handleZoomY(e);
    }

    handleZoomY(e: any) {
        const t = e.transform;
        if (t.k < 1) {
            t.k = 1;
        }
        if (t.y > 0) {
            t.y = 0;
        }
        else if (t.y < 0) {
            const r = this.yZoomScale.range()[0];
            if (t.k * r - r + t.y < 0) {
                t.y = -(t.k * r - r);
            }
        }
        this.yZoomScale = t.rescaleY(this.yScale).interpolate(d3.interpolateRound);
    }
    */


    refresh() {
        const w = parseInt(this.select().style('width'));
        if (isNaN(w)) {
            return;
        }
        this.lineoutSize = Math.floor((w - (this.margin.left + this.margin.right)) / 4);
        this.canvasWidth = w - (this.margin.left + this.lineoutSize + this.margin.right);
        this.canvasHeight = Math.floor(this.canvasWidth * (this.data.length / this.data[0].length));

        this.xZoomScale.range([0, this.canvasWidth]);
        //TODO(pjm): could keep axis as instance variable
        this.select('.sr-x-axis').call(d3.axisBottom(this.xZoomScale).ticks(5));
        this.select('.sr-x-axis-grid').call(d3.axisBottom(this.xZoomScale).ticks(5).tickSize(-(this.canvasHeight + this.lineoutSize)));
        this.yScale.range([this.canvasHeight, 0]);
        this.select('.sr-y-axis').call(d3.axisRight(this.yScale).ticks(5));
        this.select('.sr-y-axis-grid').call(d3.axisRight(this.yScale).ticks(5).tickSize(-(this.canvasWidth + this.lineoutSize)));

        this.yxScale
        //TODO(pjm): should be from data min/max
            .domain([0, 260])
            .range([this.lineoutSize - this.pad, 0]);
        this.select('.sr-yx-axis').call(d3.axisBottom(this.yxScale).ticks(3).tickFormat(d3.format('.1e')));

        this.xyScale
            .domain([0, 260])
            .range([this.lineoutSize - this.pad, 0]);
        this.select('.sr-xy-axis').call(d3.axisLeft(this.xyScale).ticks(5).tickFormat(d3.format('.1e')));

        const xd = this.domain(0);
        //const xoff = (xd[1] - xd[0]) / this.data[0].length / 2;
        const xoff = 0;
        const xline = d3.line()
              .x((d) => this.xZoomScale(d[0] + xoff))
              .y((d) => this.xyScale(d[1]));
        const xdata = this.data[Math.round(this.data.length / 2)].map((v, idx) => {
            return [
                this.domain(0)[0] + (idx / this.data[0].length) * (this.domain(0)[1] - this.domain(0)[0]),
                v,
            ];
        });
        this.select('.sr-x-overlay path').datum(xdata).attr('d', xline);

        const yd = this.domain(1);
        const yoff = (yd[1] - yd[0]) / this.data.length / 2;
        const yline = d3.line()
              .x((d) => this.yxScale(d[1]))
              .y((d) => this.yScale(d[0] + yoff));
        const ydata = this.data.map((v, idx) => {
            return [
                this.domain(1)[0] + (idx / this.data.length) * (this.domain(1)[1] - this.domain(1)[0]),
                v[Math.round(v.length / 2)],
            ];
        });
        this.select('.sr-y-overlay path').datum(ydata).attr('d', yline);

        this.canvas.width = this.canvasWidth;
        this.canvas.height = this.canvasHeight;


        if (false) {
        const xZoomDomain = this.xZoomScale.domain();
        const xDomain = this.xScale.domain();
        const yZoomDomain = this.yScale.domain();
        const yDomain = this.yScale.domain();
        const zoomWidth = xZoomDomain[1] - xZoomDomain[0];
        const zoomHeight = yZoomDomain[1] - yZoomDomain[0];
        const ctx = this.canvas.getContext('2d');
        ctx.imageSmoothingEnabled = false;
        ctx.drawImage(
            this.cacheCanvas,
            -(xZoomDomain[0] - xDomain[0]) / zoomWidth * this.canvasWidth,
            -(yDomain[1] - yZoomDomain[1]) / zoomHeight * this.canvasHeight,
            (xDomain[1] - xDomain[0]) / zoomWidth * this.canvasWidth,
            (yDomain[1] - yDomain[0]) / zoomHeight * this.canvasHeight,
        );
        }

        //const xZoom = d3.zoom(); //.on('zoom', (event) => { this.handleZoomX(event); this.refresh() });
        //this.select('.sr-mouse-rect-x').call(this.xZoom);
        //const yZoom = d3.zoom(); //.on('zoom', (event) => { this.handleZoomY(event); this.refresh() });
        //this.select('.sr-mouse-rect-y').call(this.yZoom);
        //const xyZoom = d3.zoom().on('zoom', (event) => { this.handleZoomXY(event); this.refresh() });
        //this.select('.sr-mouse-rect-xy').call(this.xyZoom);

    }

    initImage() {
        const xSize = this.data[0].length;
        const ySize = this.data.length;
        for (let yi = ySize - 1, p = -1; yi >= 0; --yi) {
            for (let xi = 0; xi < xSize; ++xi) {
                const c = d3.rgb(this.colorScale(this.data[yi][xi]) as any);
                this.imageData.data[++p] = c.r;
                this.imageData.data[++p] = c.g;
                this.imageData.data[++p] = c.b;
                this.imageData.data[++p] = 255;
            }
        }
        this.cacheCanvas.getContext('2d').putImageData(this.imageData, 0, 0);
    }

    max() : number {
        return d3.max(this.data, (row: number[]) => {
            return d3.max(row);
        }) as number;
    }

    min() : number {
        return d3.min(this.data, (row: number[]) => {
            return d3.min(row);
        }) as number;
    }

    ngOnDestroy() {
        //TODO(pjm): not sure this is required
        //this.xZoom.on('zoom', null);
        //this.resize.next();
        //this.resize.complete();
    }

    ngAfterViewInit() {
        this.resize.asObservable().pipe(debounceTime(350)).subscribe(() => this.refresh());

        this.canvas = this.select('canvas').node();
        this.ctx = this.canvas.getContext('2d', { willReadFrequently: true });
        this.cacheCanvas = document.createElement('canvas');

        this.zoom.on('zoom', (event) => {
            this.handleZoom(event);
        });
        this.select('svg').call(this.zoom);

        /*
        this.xZoom = d3.zoom().on('zoom', (event) => { this.handleZoomX(event); this.refresh() });
        this.select('.sr-mouse-rect-x').call(this.xZoom);
        this.yZoom = d3.zoom().on('zoom', (event) => { this.handleZoomY(event); this.refresh() });
        this.select('.sr-mouse-rect-y').call(this.yZoom);
        this.xyZoom = d3.zoom().on('zoom', (event) => { this.handleZoomXY(event); this.refresh() });
        this.select('.sr-mouse-rect-xy').call(this.xyZoom);
        */

        //TODO(pjm): watch input, load data
        this.cacheCanvas.width = this.data[0].length;
        this.cacheCanvas.height = this.data.length;
        this.imageData = this.ctx.getImageData(0, 0, this.cacheCanvas.width, this.cacheCanvas.height);
        this.colorScale.domain([this.min(), this.max()]);
        this.initImage();
        this.xScale.domain(this.domain(0));
        this.yScale.domain(this.domain(1));

        this.refresh();
        // required because refresh changes view values
        this.cdRef.detectChanges();
    }

    ngOnChanges(changes: any) {
        if (this.el) {
            this.refresh();
        }
    }

    @HostListener('window:resize')
    onResize() {
        this.resize.next();
    }
}
